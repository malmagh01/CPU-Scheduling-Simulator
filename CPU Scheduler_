{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["Project Description\n","You are required to produce program codes for preemptive scheduling that simulate the\n","following algorithms: Round Robin (RR), Shortest-remaining-time-first- Preemptive, and\n","Priority scheduling.\n","\n","Program Input:\n","The program should get inputs that describe the incoming process in term of:\n","1. Number of Processers\n","2. Arrival Time for each process\n","3. CPU Burst Time for each process.\n","4. Priority (if any) for each Process; (should be set to zero when non-applicable)\n","5. Time quantum (q) in case of RR algorithm; (should be set to zero for other\n","algorithms)\n","6. The inputs of either arrival time and/or CPU burst time can be specified in three\n","methods:\n","a. Manually [Mandatory]\n","b. Generated randomly with uniform distribution [Extra marks*]\n","c. Generated randomly with Gaussian distribution [Extra marks*]\n","*Extra marks only apply when you select one method, either b or c.\n","\n","Program Output:\n","Upon processing the inputs of the scheduling algorithm and processes, the simulation program should:\n","1. draw the Gantt chart,\n","2. display the turnaround time for each process,\n","3. display the waiting time for each process,\n","4. and display the statistical results including the average waiting time and the average\n","turnaround time for the group of input processes.\n","Once the program extracts the above statistical results, you are required to evaluate and\n","compare the results of the algorithms by selecting any two metrics of your choice.\n","Note: do not forget to set q value for time quantum in case of RR algorithm."],"metadata":{"id":"TzFacJkWTKZ9"}},{"cell_type":"markdown","source":["----------------------------------------------------------------------"],"metadata":{"id":"qlL8c2nfAuGE"}},{"cell_type":"markdown","source":["1. First we must import the necessary libraries"],"metadata":{"id":"EHqmSvVydQpe"}},{"cell_type":"code","source":["import numpy as np # provides support for arrays, matrices, and high-level mathematical functions\n","from numpy import random # used to generate random numbers\n","import copy # to ensure that there are copies of 'process' to avoiod errors and repetition"],"metadata":{"id":"i4vFpGh844I0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["2. Class to store process details"],"metadata":{"id":"TatbLDr4e39H"}},{"cell_type":"code","source":["# class used to store process information to create objects that represents each process\n","class Process:\n","    def __init__(self, pid, arrival_time, burst_time, priority=0 ):\n","        self.pid = pid\n","        self.arrival_time = arrival_time\n","        self.burst_time = burst_time\n","        self.remaining_time = burst_time\n","        self.priority = priority\n","        self.completion_time = 0\n","        self.turnaround_time = 0\n","        self.waiting_time = 0\n","        #time quantum is decided later\n"],"metadata":{"id":"7_-iy8Aj0Ksq"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["3. Method for displaying average waiting time and average turnaround time"],"metadata":{"id":"Sea4roVkrLlz"}},{"cell_type":"code","source":["def display_results(processes, title):\n","    print(f\"\\n{title} Results:\")\n","\n","    num_of_processes = len(processes)\n","\n","    print(\"\\nProcess Details:\")\n","    print(\"PID\\tWaiting Time\\tTurnaround Time\\tPriority\")\n","    for p in processes:\n","        print(f\"{p.pid}\\t{p.waiting_time}\\t\\t{p.turnaround_time}\\t\\t{p.priority}\")\n","\n","    total_waiting_time = sum(p.waiting_time for p in processes)\n","    total_turnaround_time = sum(p.turnaround_time for p in processes)\n","    average_waiting_time = total_waiting_time / num_of_processes\n","    average_turnaround_time = total_turnaround_time / num_of_processes\n","\n","    print(f\"Average Waiting Time: {average_waiting_time}\")\n","    print(f\"Average Turnaround Time: {average_turnaround_time}\")\n","\n","    return average_waiting_time, average_turnaround_time\n","\n"],"metadata":{"id":"zKnki1Ebkobj"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["4. Algorithms (Round robin - SRTF (SJF preemptive) - Priority scheduling)"],"metadata":{"id":"OBZKRIBjrV7B"}},{"cell_type":"code","source":["def RR(processes, quantum):\n","    time = 0  # Current time\n","    queue = []  # Process queue\n","    gantt_data = []  # For Gantt chart\n","\n","    # Sort by arrival time\n","    processes = sorted(processes, key=lambda x: x.arrival_time)\n","\n","    completed_processes = []\n","    remaining_processes = processes[:]\n","\n","    while remaining_processes or queue:\n","        # Add newly arrived processes to the queue\n","        while remaining_processes and remaining_processes[0].arrival_time <= time:\n","            queue.append(remaining_processes.pop(0))\n","\n","        if queue:\n","            current_process = queue.pop(0)\n","            execution_time = min(quantum, current_process.remaining_time)\n","            gantt_data.append((current_process.pid, time, time + execution_time))\n","            time += execution_time\n","            current_process.remaining_time -= execution_time\n","\n","\n","            # Check if process is complete\n","            if current_process.remaining_time == 0:\n","                current_process.completion_time = time\n","                current_process.turnaround_time = current_process.completion_time - current_process.arrival_time\n","                current_process.waiting_time = current_process.turnaround_time - current_process.burst_time\n","                completed_processes.append(current_process)\n","            else:\n","                # Check for newly arrived processes after time advancement\n","                while remaining_processes and remaining_processes[0].arrival_time <= time:\n","                    queue.append(remaining_processes.pop(0))\n","                # Re-queue the current process\n","                queue.append(current_process)\n","        else:\n","            # Advance time if no process is ready\n","            time = remaining_processes[0].arrival_time\n","\n","    gantt_chart(gantt_data)  # Print Gantt chart\n","    return completed_processes\n","\n","\n","\n","\n","# Shortest Remaining Time First algorithm (SRTF - Preemptive)\n","def srtf(processes):\n","    current_time = 0\n","    completed_processes = 0\n","    num_of_processes = len(processes)\n","    completed = []\n","    gantt_data = []  # List to store time data for each process\n","\n","    while completed_processes < num_of_processes:\n","\n","        # This part finds all processes that have arrived but still need time\n","        available_processes = [p for p in processes if p.arrival_time <= current_time and p.remaining_time > 0]\n","\n","        if available_processes:\n","            # Select the process with the shortest remaining time\n","            shortest = min(available_processes, key=lambda x: x.remaining_time)\n","\n","            # Execute this process for one time unit\n","            shortest.remaining_time -= 1\n","            current_time += 1\n","\n","            # Log the process in the Gantt chart\n","            gantt_data.append((shortest.pid, current_time - 1, current_time))\n","\n","            # If this process is now complete\n","            if shortest.remaining_time == 0:\n","                shortest.completion_time = current_time\n","                shortest.turnaround_time = shortest.completion_time - shortest.arrival_time\n","                shortest.waiting_time = shortest.turnaround_time - shortest.burst_time\n","                completed.append(shortest)\n","                completed_processes += 1\n","        else:\n","            # If no process is available, increment the time\n","            current_time += 1\n","    gantt_chart(gantt_data)  # Print the Gantt chart\n","    return completed\n","\n","\n","# Priority Scheduling Algorithm\n","def priority_scheduling(processes):\n","    current_time = 0\n","    num_processes = len(processes)\n","    remaining_time = [p.burst_time for p in processes]\n","    completed_processes = 0\n","    gantt_data = []  # List to store time data for each process\n","\n","    while completed_processes < num_processes:\n","\n","        # Get all processes that have arrived and are not yet complete\n","        available_processes = [p for i, p in enumerate(processes) if p.arrival_time <= current_time and remaining_time[i] > 0]\n","\n","        if available_processes:\n","\n","            # Select the process with the highest priority (lowest priority number)\n","            highest_priority_process = min(available_processes, key=lambda x: (x.priority, x.arrival_time))\n","            idx = processes.index(highest_priority_process)\n","\n","            # Execute the process for one unit of time\n","            remaining_time[idx] -= 1\n","            current_time += 1\n","\n","            # Log the process in the Gantt chart\n","            gantt_data.append((highest_priority_process.pid, current_time - 1, current_time))\n","\n","            # If the process is complete, finalize its times\n","            if remaining_time[idx] == 0:\n","                 highest_priority_process.completion_time = current_time\n","                 highest_priority_process.turnaround_time = highest_priority_process.completion_time - highest_priority_process.arrival_time\n","                 highest_priority_process.waiting_time = highest_priority_process.turnaround_time - highest_priority_process.burst_time\n","                 completed_processes += 1\n","        else:\n","            # If no process is available, increment the time\n","            current_time += 1\n","\n","    gantt_chart(gantt_data)  # Print the Gantt chart\n","    return processes\n","\n"],"metadata":{"id":"OLxFxODCBHX_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["5. Method to compare between results of each algorithm"],"metadata":{"id":"G7kObq_FrlVM"}},{"cell_type":"code","source":["def compare(RR, SRTF , Priority):\n","\n","  print(\"\\nComparison of Algorithms:\")\n","  print(\"Algorithm\\tAverage Waiting Time\\tAverage Turnaround Time\")\n","  print(f\"RR\\t\\t{RR[0]}\\t\\t\\t{RR[1]}\")\n","  print(f\"SRTF\\t\\t{SRTF[0]}\\t\\t\\t{SRTF[1]}\")\n","  print(f\"Priority\\t{Priority[0]}\\t\\t\\t{Priority[1]}\")\n","\n","  if RR[0] < SRTF[0] and RR[0] < Priority[0]:\n","    print(\"Round Robin has the best average waiting time \")\n","  elif SRTF[0] < RR[0] and SRTF[0] < Priority[0]:\n","    print(\"SRTF has the best average waiting time\")\n","  else:\n","    print(\"Priority Scheduling has the best average waiting time\")\n","\n","  if RR[1] < SRTF[1] and RR[1] < Priority[1]:\n","    print(\"Round Robin has the best average turnaround time\")\n","  elif SRTF[1] < RR[1] and SRTF[1] < Priority[1]:\n","    print(\"SRTF has the best average turnaround time\")\n","  else:\n","    print(\"Priority Scheduling has the best average turnaround time\")\n"],"metadata":{"id":"QULvBWdsHa8x"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["6. Print process details"],"metadata":{"id":"44eDTh-iru7A"}},{"cell_type":"code","source":["def print_processes(processes):\n","    print(\"\\nProcess Details:\")\n","    print(\"PID\\tArrival Time\\tBurst Time\\tPriority\")\n","    for p in processes:\n","        print(f\"{p.pid}\\t{p.arrival_time}\\t\\t{p.burst_time}\\t\\t{p.priority}\")\n"],"metadata":{"id":"QHv-qrgnU_CT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["7. Display Gantt chart"],"metadata":{"id":"KZnXEouWr7kn"}},{"cell_type":"code","source":["def gantt_chart(arr_gantt):\n","\n","    print(\"\\n\\n ----------------------Gantt Chart--------------------------\")\n","    optimized_gantt = []\n","    previous_process = None\n","    start_time = None\n","\n","    for process in arr_gantt:\n","        pid, start, end = process\n","\n","        if previous_process == pid:\n","            continue  # If the current process is the same as the previous one, skip it\n","        else:\n","            if previous_process is not None:\n","                optimized_gantt.append((previous_process, start_time, start))  # Add the previous process's time span\n","            start_time = start\n","            previous_process = pid\n","\n","    # Add the last remaining process to the chart\n","    if previous_process is not None:\n","        optimized_gantt.append((previous_process, start_time, arr_gantt[-1][2]))\n","\n","    # Print the chart with clear separators between processes\n","    print(\"\\n\" + \"-\" * (len(optimized_gantt) * 16 + 1))\n","    print(\"||\", end=\"\")\n","    for i in range(len(optimized_gantt)):\n","        print(f\"\\tp{optimized_gantt[i][0]}\\t |\", end=\"\")\n","\n","    print(\"|\")\n","    print(\"-\" * (len(optimized_gantt) * 16 + 1))\n","\n","\n","    print(0, end=\"\")\n","    for i in range(len(optimized_gantt)):\n","        print(f\"\\t\\t{optimized_gantt[i][2]}\", end=\"\")\n","    print()\n"],"metadata":{"id":"a9jMzll92ejL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["8. Main method"],"metadata":{"id":"1eCYwlR-r-We"}},{"cell_type":"code","source":["def main():\n","    print(\"Welcome to the Scheduling Simulator!\")\n","    num_of_processes = int(input(\"Enter the number of processes: \"))\n","\n","    processes = []\n","\n","    for i in range(num_of_processes):\n","\n","        print(\"------------------------------------------------\")\n","        pid = i + 1\n","        print(f\"\\nEnter details for Process {pid}:\")\n","\n","        # Arrival Time Input\n","        print(\"Choose how to set the arrival time:\")\n","        print(\"a) Manually\")\n","        print(\"b) Randomly by uniform distribution\")\n","        print(\"c) Randomly by Gaussian distribution\")\n","        arrival_choice = input(\"Enter choice (a/b/c): \").strip().lower()\n","\n","        if arrival_choice == 'a':\n","            arrival_time = int(input(f\"Arrival time for Process {pid}: \"))\n","        elif arrival_choice == 'b':\n","            arrival_time = int(random.uniform(0, 10))\n","            print(\"arrival time is \" + str(arrival_time))\n","        elif arrival_choice == 'c':\n","            arrival_time = abs(int(random.normal(5, 2)))  # Mean=5, StdDev=2\n","            print(\"arrival time is \" + str(arrival_time))\n","        else:\n","            print(\"Invalid choice! Setting arrival time to 0 by default.\")\n","            arrival_time = 0\n","\n","        # Burst Time Input\n","        print(\"Choose how to set the burst time:\")\n","        print(\"a) Manually\")\n","        print(\"b) Randomly by uniform distribution\")\n","        print(\"c) Randomly by Gaussian distribution\")\n","        burst_choice = input(\"Enter choice (a/b/c): \").strip().lower()\n","\n","        if burst_choice == 'a':\n","            burst_time = int(input(f\"Burst time for Process {pid}: \"))\n","        elif burst_choice == 'b':\n","            burst_time = int(random.uniform(1, 10))\n","            print(\"burst time is \" + str(burst_time))\n","        elif burst_choice == 'c':\n","            burst_time = abs(int(random.normal(6, 1)))  # Mean=6, StdDev=1\n","            print(\"burst time is \" + str(burst_time))\n","        else:\n","            print(\"Invalid choice! Setting burst time to 1 by default.\")\n","            burst_time = 1\n","\n","        print(\"Enter priority of process, or 0 by default: \")\n","        priority = int(input(f\"priority of Process {pid}: \"))\n","\n","        # Append the process to the list inside the loop\n","        processes.append(Process(pid, arrival_time, burst_time, priority))\n","\n","\n","    print_processes(processes)\n","\n","    q_time = int(input(\"Enter the quantum time for Round Robin algorithm: \"))\n","\n","    # Run RR algorithm\n","    rr_processes = copy.deepcopy(processes)\n","    rr_results = RR(rr_processes, q_time)\n","    rr_avg_waiting_time, rr_avg_turnaround_time = display_results(rr_results, \"Round Robin\")\n","\n","    # Run SRTF algorithm\n","    srtf_processes = copy.deepcopy(processes)\n","    srtf_results = srtf(srtf_processes)\n","    srtf_avg_waiting_time, srtf_avg_turnaround_time = display_results(srtf_results, \"SRTF\")\n","\n","    # Run Priority Scheduling algorithm\n","    priority_processes = copy.deepcopy(processes)\n","    priority_results = priority_scheduling(priority_processes)\n","    priority_avg_waiting_time, priority_avg_turnaround_time = display_results(priority_results, \"Priority Scheduling\")\n","\n","    # compare(rr, srtf, priority)\n","    compare((rr_avg_waiting_time, rr_avg_turnaround_time),\n","            (srtf_avg_waiting_time, srtf_avg_turnaround_time),\n","            (priority_avg_waiting_time, priority_avg_turnaround_time))\n","\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XTZ2a6rVF0s_","outputId":"774865da-0add-4091-c748-334ec5ae0cfa","executionInfo":{"status":"ok","timestamp":1733038309702,"user_tz":-180,"elapsed":91983,"user":{"displayName":"Nada Farhan","userId":"07255206452547990158"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Welcome to the Scheduling Simulator!\n","Enter the number of processes: 2\n","------------------------------------------------\n","\n","Enter details for Process 1:\n","Choose how to set the arrival time:\n","a) Manually\n","b) Randomly by uniform distribution\n","c) Randomly by Gaussian distribution\n","Enter choice (a/b/c): b\n","arrival time is 1\n","Choose how to set the burst time:\n","a) Manually\n","b) Randomly by uniform distribution\n","c) Randomly by Gaussian distribution\n","Enter choice (a/b/c): b\n","burst time is 1\n","Enter priority of process, or 0 by default: \n","priority of Process 1: 4\n","------------------------------------------------\n","\n","Enter details for Process 2:\n","Choose how to set the arrival time:\n","a) Manually\n","b) Randomly by uniform distribution\n","c) Randomly by Gaussian distribution\n","Enter choice (a/b/c): c\n","arrival time is 4\n","Choose how to set the burst time:\n","a) Manually\n","b) Randomly by uniform distribution\n","c) Randomly by Gaussian distribution\n","Enter choice (a/b/c): c\n","burst time is 4\n","Enter priority of process, or 0 by default: \n","priority of Process 2: 11\n","\n","Process Details:\n","PID\tArrival Time\tBurst Time\tPriority\n","1\t1\t\t1\t\t4\n","2\t4\t\t4\t\t11\n","Enter the quantum time for Round Robin algorithm: 4\n","\n","\n"," ----------------------Gantt Chart--------------------------\n","\n","---------------------------------\n","||\tp1\t |\tp2\t ||\n","---------------------------------\n","0\t\t4\t\t8\n","\n","Round Robin Results:\n","\n","Process Details:\n","PID\tWaiting Time\tTurnaround Time\tPriority\n","1\t0\t\t1\t\t4\n","2\t0\t\t4\t\t11\n","Average Waiting Time: 0.0\n","Average Turnaround Time: 2.5\n","\n","\n"," ----------------------Gantt Chart--------------------------\n","\n","---------------------------------\n","||\tp1\t |\tp2\t ||\n","---------------------------------\n","0\t\t4\t\t8\n","\n","SRTF Results:\n","\n","Process Details:\n","PID\tWaiting Time\tTurnaround Time\tPriority\n","1\t0\t\t1\t\t4\n","2\t0\t\t4\t\t11\n","Average Waiting Time: 0.0\n","Average Turnaround Time: 2.5\n","\n","\n"," ----------------------Gantt Chart--------------------------\n","\n","---------------------------------\n","||\tp1\t |\tp2\t ||\n","---------------------------------\n","0\t\t4\t\t8\n","\n","Priority Scheduling Results:\n","\n","Process Details:\n","PID\tWaiting Time\tTurnaround Time\tPriority\n","1\t0\t\t1\t\t4\n","2\t0\t\t4\t\t11\n","Average Waiting Time: 0.0\n","Average Turnaround Time: 2.5\n","\n","Comparison of Algorithms:\n","Algorithm\tAverage Waiting Time\tAverage Turnaround Time\n","RR\t\t0.0\t\t\t2.5\n","SRTF\t\t0.0\t\t\t2.5\n","Priority\t0.0\t\t\t2.5\n","Priority Scheduling has the best average waiting time\n","Priority Scheduling has the best average turnaround time\n"]}]}]}